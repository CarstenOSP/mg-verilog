{"priority_encoder.v": {"block_summary": ["This section calculates how many hierarchical stages are needed for encoding, always ensuring at least one. It then finds and stores the power-of-two size that exceeds or equals the original width, and pads the input bits with zeros to match that size. Arrays are declared to hold \u201cvalid\u201d signals and partial encoding results for each stage. A generate loop then inspects each pair of padded input bits to determine whether at least one bit in the pair is active, marking those pairs as valid for further processing in the subsequent encoding levels.", "This block first determines how each pair of bits contributes to the initial encoded output based on whether the least significant bit has priority. When least significant bits take priority, the encoded bit is derived from the least significant side of the pair; otherwise, the more significant side is used. After establishing this initial encoding, a multi-level loop progressively combines pairs of signals from the prior stage into single valid outputs for the next stage. At each compression level, it merges the \u201cvalid\u201d signals and then applies the selected priority scheme to prepare intermediate encoding results, continuing until all hierarchy levels are processed.", "", "This final line concludes the module definition. It does not introduce any additional logic or outputs; instead, it simply signifies the end of the priority encoder module, ensuring that all preceding declarations and generated structures are fully enclosed within the design."], "splitted_idx": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30]], "module_header": "module priority_encoder # (parameter WIDTH = 4,parameter LSB_HIGH_PRIORITY = 0) (input wire [WIDTH-1:0] input_unencoded,output wire output_valid,output wire [$clog2(WIDTH)-1:0] output_encoded,output wire [WIDTH-1:0] output_unencoded);"}}