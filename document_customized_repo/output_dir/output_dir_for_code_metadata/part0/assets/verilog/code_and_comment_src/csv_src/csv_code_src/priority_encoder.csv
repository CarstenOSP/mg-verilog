content,line_number
"module priority_encoder # (parameter WIDTH = 4,parameter LSB_HIGH_PRIORITY = 0) (input wire [WIDTH-1:0] input_unencoded,output wire output_valid,output wire [$clog2(WIDTH)-1:0] output_encoded,output wire [WIDTH-1:0] output_unencoded); 
",0
"parameter LEVELS = WIDTH > 2 ? $clog2(WIDTH) : 1; 
",1
"parameter W = 2**LEVELS; 
",2
"wire [W-1:0] input_padded = {{W-WIDTH{1'b0}}, input_unencoded}; 
",3
"wire [W/2-1:0] stage_valid[LEVELS-1:0]; 
",4
"wire [W/2-1:0] stage_enc[LEVELS-1:0]; 
",5
"generate 
",6
" genvar l, n; 
",7
" for (n = 0; n < W/2; n = n + 1) begin : loop_in 
",8
" assign stage_valid[0][n] = |input_padded[n*2+1:n*2]; 
",9
" if (LSB_HIGH_PRIORITY) begin 
",10
" assign stage_enc[0][n] = !input_padded[n*2+0]; 
",11
" end else begin 
",12
" assign stage_enc[0][n] = input_padded[n*2+1]; 
",13
" end 
",14
" end 
",15
" for (l = 1; l < LEVELS; l = l + 1) begin : loop_levels 
",16
" for (n = 0; n < W/(2*2**l); n = n + 1) begin : loop_compress 
",17
" assign stage_valid[l][n] = |stage_valid[l-1][n*2+1:n*2]; 
",18
" if (LSB_HIGH_PRIORITY) begin 
",19
" assign stage_enc[l][(n+1)*(l+1)-1:n*(l+1)] = stage_valid[l-1][n*2+0] ? {1'b0, stage_enc[l-1][(n*2+1)*l-1:(n*2+0)*l]} : {1'b1, stage_enc[l-1][(n*2+2)*l-1:(n*2+1)*l]}; 
",20
" end else begin 
",21
" assign stage_enc[l][(n+1)*(l+1)-1:n*(l+1)] = stage_valid[l-1][n*2+1] ? {1'b1, stage_enc[l-1][(n*2+2)*l-1:(n*2+1)*l]} : {1'b0, stage_enc[l-1][(n*2+1)*l-1:(n*2+0)*l]}; 
",22
" end 
",23
" end 
",24
" end 
",25
"endgenerate 
",26
"assign output_valid = stage_valid[LEVELS-1]; 
",27
"assign output_encoded = stage_enc[LEVELS-1]; 
",28
"assign output_unencoded = 1 << output_encoded; 
",29
endmodule,30
